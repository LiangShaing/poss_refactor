def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

//設定 android build 的版本
def env_android_version = System.getenv("ENV_ANDROID_VERSION");
if (env_android_version == null || env_android_version.isEmpty()) {
    env_android_version = flutterVersionName
}
System.out.println("env_android_version: " + env_android_version)

//設定 newrelic token
def newrelicToken = System.getenv("ENV_NEWRELIC_TOKEN");
if (newrelicToken == null || newrelicToken.isEmpty()) {
    newrelicToken = 'AA61ad627f26fffd18a6fca82b34f103bae5929d90-NRMA'
}
System.out.println("newrelicToken: " + newrelicToken)

//設定 版本確認url
def checkVersionUrl = System.getenv("ENV_CHECK_VERSION_URL");
if (checkVersionUrl == null || checkVersionUrl.isEmpty()) {
    checkVersionUrl = 'https://businesssalestest.chowsangsang.com/resource/app/enterpriseapp/versions.json'
}
System.out.println("checkVersionUrl: " + checkVersionUrl)

//設定 騰訊雲app id
def xgAccessId = System.getenv("ENV_XG_ACCESS_ID");
if (xgAccessId == null || xgAccessId.isEmpty()) {
    xgAccessId = '1530003232'
}
System.out.println("xgAccessId: " + xgAccessId)

def xgAccessKey = System.getenv("ENV_XG_ACCESS_KEY");
if (xgAccessKey == null || xgAccessKey.isEmpty()) {
    xgAccessKey = 'AHL48JNLH1YQ'
}
System.out.println("xgAccessKey: " + xgAccessKey)

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'newrelic'

android {
    compileSdkVersion flutter.compileSdkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.poss_mobile_app"
        minSdkVersion 20
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName env_android_version
        buildConfigField "String", "NEWRELIC_TOKEN", "\"$newrelicToken\""
        buildConfigField "String", "CHECK_VERSION_URL", "\"$checkVersionUrl\""
        multiDexEnabled true
        manifestPlaceholders = [
                XG_ACCESS_ID : xgAccessId,
                XG_ACCESS_KEY: xgAccessKey,
        ]
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "version"

    productFlavors {
        possmobileapptest {
            applicationId "com.chowsangsang.possmobile.app.uat"
            resValue "string", "app_name", "POSS(TEST)"
            manifestPlaceholders = [appScheme  : "chowsangsang",
                                    appHostName: "uat.app.chowsangsang.com"]
        }
        possmobileappuat {
            applicationId "com.chowsangsang.possmobile.app.uat"
            resValue "string", "app_name", "POSS(UAT)"
            manifestPlaceholders = [appScheme  : "chowsangsang",
                                    appHostName: "uat.app.chowsangsang.com"]
        }

        possmobileapp {
            applicationId "com.chowsangsang.possmobile.app"
            resValue "string", "app_name", "POSS"
            manifestPlaceholders = [appScheme  : "chowsangsang",
                                    appHostName: "app.chowsangsang.com"]
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            if (variant.buildType.name == "release" && variant.flavorName == "possmobileapptest") {
                output.outputFileName = "PossMobile-APP-UAT.apk"
            } else if (variant.buildType.name == "release" && variant.flavorName == "possmobileappuat") {
                output.outputFileName = "PossMobile-APP-UAT.apk"
            } else if (variant.buildType.name == "release" && variant.flavorName == "possmobileapp") {
                output.outputFileName = "PossMobile-APP.apk"
            } else if (variant.buildType.name == "debug" && variant.flavorName == "possmobileapptest") {
                output.outputFileName = "PossMobile-APP-UAT-Debug.apk"
            } else if (variant.buildType.name == "debug" && variant.flavorName == "possmobileappuat") {
                output.outputFileName = "PossMobile-APP-UAT-Debug.apk"
            } else if (variant.buildType.name == "debug" && variant.flavorName == "possmobileapp") {
                output.outputFileName = "PossMobile-APP-Debug.apk"
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    ant.replace(
            file: 'newrelic.properties',
            token: 'AA61ad627f26fffd18a6fca82b34f103bae5929d90-NRMA',
            value: newrelicToken
    )
}

dependencies {
    implementation 'com.newrelic.agent.android:android-agent:6.0.0'
    implementation 'com.github.javiersantos:AppUpdater:2.7'

    implementation 'com.tencent.tpns:tpns:1.3.5.0-release'

    implementation "androidx.multidex:multidex:2.0.1"
}

flutter {
    source '../..'
}